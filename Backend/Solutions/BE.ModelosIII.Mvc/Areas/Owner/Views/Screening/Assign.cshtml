@using System.Globalization
@using BE.ModelosIII.Infrastructure.Helpers
@using BE.ModelosIII.Mvc.Components.Html
@using BE.ModelosIII.Mvc.Models.Movie
@using BE.ModelosIII.Mvc.Models.Multiplex
@using MvcContrib.FluentHtml
@model BE.ModelosIII.Tasks.Commands.Screening.AssignScreeningCommand
@{
    ViewBag.Title = "Editar Función";
    Layout = ViewBag.Layout;
}
<section class="utopia-widget">
    <div class="utopia-widget-title">
        <img class="utopia-widget-icon" src="/Content/img/icons/paragraph_justify.png">
        <span>Editar Función</span>
    </div>
    <div class="utopia-widget-content">
        @using (Html.BeginForm((string)ViewBag.ActionName, "Screening", FormMethod.Post, new { @id = "screeningForm", @class = "form-horizontal", enctype = "multipart/form-data" }))
        {
            <fieldset>
                  <div class="control-group">
                    <label for="inputError" class="control-label">
                        Horas de Inicio</label>
                    <div class="controls">
                        @Html.TextBoxFor(m => m.StartTimes, new { @class = "span4 times", maxlength = "255" })
                        @Html.ValidationMessageFor(m => m.StartTimes, null, new { @class = "help-inline" })
                    </div>
                </div>
                <div class="control-group">
                    <label for="inputError" class="control-label">
                        Desde</label>
                    <div class="controls">
                        @Html.TextBoxFor(m => m.StartDate, new { @class = "input-medium datepickerSince span4", @Value = Model.StartDate.ToString("dd/MM/yyyy") })
                        @Html.ValidationMessageFor(m => m.StartDate, null, new { @class = "help-inline" })
                    </div>
                </div>
                <div class="control-group">
                    <label for="inputError" class="control-label">
                        Hasta</label>
                    <div class="controls">
                        @Html.TextBoxFor(m => m.EndDate, new { @class = "input-medium datepickerTo span4", @Value = Model.EndDate.ToString("dd/MM/yyyy") })
                        @Html.ValidationMessageFor(m => m.EndDate, null, new { @class = "help-inline" })
                    </div>
                </div>
                <div class="control-group">
                    <label for="inputError" class="control-label">Días de la Semana</label>
                    <div class="controls">
                        @(this.CheckBoxList("Days")
                              .Options(Enum.GetValues(typeof(DayOfWeek))
                                           .Cast<DayOfWeek>()
                                           .ToDictionary(x => ((int)x).ToString(CultureInfo.InvariantCulture), x => x.ToLocalizedLabel(CultureInfo.CurrentCulture)))
                              .Selected(Model.Days.Select(x => (int)x))
                              .Class("span9 checkboxList"))
                        @Html.ValidationMessageFor(m => m.Days, null, new { @class = "help-inline" })
                    </div>
                </div>
                <div class="control-group">
                    <label for="inputError" class="control-label">
                        Complejo</label>
                    <div class="controls">
                        @(this.Select("MultiplexId")
                              .Options(((IList<MultiplexModel>)ViewBag.Multiplexes).ToDictionary(x => x.Id, x => x.Name))
                              .FirstOption("Seleccione un Complejo")
                              .Selected(Model.MultiplexId)
                              .Class("span4 multiplexSelect"))
                        @Html.ValidationMessageFor(m => m.MultiplexId, null, new { @class = "help-inline" })
                    </div>
                </div>
                <div class="control-group">
                    <label for="inputError" class="control-label">
                        Sala</label>
                    <div class="controls">
                        @(this.Select("ScreenId")
                              .FirstOption("Seleccione un Complejo")
                              .Selected(Model.ScreenId)
                              .Class("span4 screenSelect"))
                        @Html.ValidationMessageFor(m => m.ScreenId, null, new { @class = "help-inline" })
                    </div>
                </div>
                <div class="control-group">
                    <label for="inputError" class="control-label">
                        Película</label>
                    <div class="controls">
                        @(this.Select("MovieId")
                              .Options(((IList<MovieListModel>)ViewBag.Movies).ToDictionary(x => x.Id, x => x.Title))
                              .FirstOption(string.Empty)
                              .Selected(Model.MovieId)
                              .Class("span4 populate placeholder"))
                        @Html.ValidationMessageFor(m => m.MovieId, null, new { @class = "help-inline" })
                    </div>
                </div>
                <div class="control-group box-button">
                    <div class="utopia-form-button">
                        <a href="@Url.Action("Index")" class="btn span2">Cancelar</a>
                        <button href="javascript:void(0)" type="submit" class="btn btn-primary span2">
                            Guardar</button>
                    </div>
                </div>
                @Html.AntiForgeryToken()
            </fieldset>
        }
    </div>
</section>
@section scripts {
    <script type="text/javascript" src="/Content/js/bootstrap-datepicker.js"></script>
    <script type="text/javascript" src="/Content/js/jquery.mask.min.js" charset="UTF-8"></script>
    <script type="text/javascript">
        $(function () {
            var screenModels = JSON.parse('@Html.Raw(ViewBag.Screens)');
            var originalMultiplexId = @Model.MultiplexId;
            var originalScreenId = @Model.ScreenId;

            var loadScreens = function (id) {
                var screens;
                for (var i = 0; i < screenModels.length; i++) {
                    if (screenModels[i].MultiplexId === id) {
                        screens = screenModels[i].Screens;
                        break;
                    }
                }

                var items = '<option value="0">Seleccione un Complejo</option>';
                if (typeof (screens) != "undefined") {
                    items = '<option value="0">Seleccione una Sala</option>';
                    $.each(screens, function (i, sc) {
                        items += "<option value='" + sc.Id + "'>" + sc.Name + "</option>";
                    });
                }
                $('.screenSelect').html(items);
            };
            
            var dateSince = $(".datepickerSince").datepicker({
                    format: "dd/mm/yyyy",
                    weekStart: 0
                }).on('changeDate', function(ev) {
                    if (ev.date.valueOf() > dateTo.date.valueOf()) {
                        var newDate = new Date(ev.date);
                        newDate.setDate(newDate.getDate());
                        dateTo.setValue(newDate);
                    }
                    dateSince.hide();
                }).data("datepicker");
            
            var dateTo = $(".datepickerTo").datepicker({
                    format: "dd/mm/yyyy",
                    weekStart: 0,
                    onRender: function(date) {
                        return date.valueOf() < dateSince.date.valueOf() ? 'disabled' : '';
                    }
                }).on('changeDate', function(ev) {
                    dateTo.hide();
                }).data("datepicker");

            $('.times').mask('00:00,00:00,00:00,00:00,00:00,00:00,00:00,00:00,00:00,00:00,00:00,00:00,00:00,00:00,00:00');

            $('.multiplexSelect').change(function () {
                var multiplexId = parseInt($(this).val());
                loadScreens(multiplexId);
            });

            loadScreens(originalMultiplexId);
            $('.screenSelect').val(originalScreenId);
            
             initializeSelect('#MovieId', {
                placeholder: "Seleccione una Película"
            });
        });
    </script>
}
@section css {
    <link href="/Content/styles/datepicker.css" rel="stylesheet" type="text/css" />
}
